{
    "get_tables_name": "SELECT name FROM sqlite_master WHERE type='table';",
    "foreign_keys_on": "PRAGMA foreign_keys = ON;",
    "create_table_table": "CREATE TABLE Tableinfo (orders_num INTEGER PRIMARY KEY AUTOINCREMENT, table_num INTEGER);",
    "create_table_menu": "CREATE TABLE Menu (name TEXT PRIMARY KEY, price INTEGER);",
    "create_table_paymentstatus": "CREATE TABLE PaymentStatus (orders_num INTEGER PRIMARY KEY, is_paid BOOLEAN);",
    "create_table_orders": "CREATE TABLE Orders (id INTEGER PRIMARY KEY AUTOINCREMENT, orders_num INTEGER, name TEXT, count INTEGER, orders_time DATETIME, finish BOOLEAN, FOREIGN KEY(name) REFERENCES Menu(name));",
    "create_table_log": "CREATE TABLE Log (id INTEGER PRIMARY KEY AUTOINCREMENT, level INTEGER, message TEXT, time DATETIME);",
    "max_order_num": "select max(orders_num) from Orders",
    "oreder_new": "INSERT INTO Orders (orders_num, name, count, orders_time, finish) VALUES ({0}, \"{name}\", {count}, datetime(\"now\", \"localtime\"), false);",
    "table_columns": "SELECT name FROM PRAGMA_TABLE_INFO(\"{0}\");",
    "init_menu": "INSERT INTO Menu (name, price) VALUES (\"{0}\", {1});",
    "orders_not_finished": "SELECT * FROM orders JOIN Tableinfo ON orders.orders_num = Tableinfo.orders_num WHERE finish = false;",
    "orders_not_payed": "SELECT * FROM Orders WHERE orders_num IN (SELECT PaymentStatus.orders_num FROM PaymentStatus JOIN Tableinfo ON PaymentStatus.orders_num = Tableinfo.orders_num WHERE PaymentStatus.is_paid = false);",
    "add_table_num_to_orders": "INSERT INTO Tableinfo (orders_num, table_num) VALUES ({0}, {1});",
    "set_orders_finished": "UPDATE orders SET finish = true WHERE orders_num = {0};",
    "add_orders_not_payed": "INSERT INTO PaymentStatus (orders_num, is_paid) VALUES ({0}, false);",
    "set_orders_payed": "UPDATE PaymentStatus SET is_paid = true WHERE orders_num = {0};",
    "del_tableinfo": "DELETE FROM Tableinfo WHERE orders_num = {0};",
    "kitchen": "SELECT Orders.orders_num, Tableinfo.table_num, Orders.name, Orders.count FROM Orders JOIN Tableinfo ON Orders.orders_num = Tableinfo.orders_num WHERE Orders.finish = false;",
    "log": "INSERT INTO Log (level, message, time) VALUES ({0}, \"{1}\", datetime(\"now\", \"localtime\"));",
    "read_log": "SELECT level, message, time FROM Log WHERE level <= {0};",
    "read_log_from_to": "SELECT level, message, time FROM Log WHERE time >= \"{0}\" and time <= \"{0}\";"
}